Some ideas:
    * we should have a kind of matrix that will store what is written on the screen
    * we should also have a kind of cursor that points where the player is writing
    * we also need a function that will convert any pressed key to its corresponding
    ascii-art letter, by printing it
    * we will need a visual cursor pointing to the selected cell, to allow the player
    to modify any letter and not just the last letter which is the case in the original
    wordle

Actual algorithm:
    main {
        verify window size, if not enough quit with a warning message
        main_loop {
            display main menu (New Game, Continue, Settings, Quit)
            switch (main_menu_choice) {
                case 'New game':
                    reset stuff to the starting state
                    display starting UI
                    session_loop 6 attempts { // gives you 6 attempts or word-found win (exit loop)
                        get_valid_word_loop { // gets a valid word 
                            put cursor[COL] at the start internally and visually
                            word[5]; to be filled by the loop below
                            get_word_loop (or arrow) { // get a valid character (letter or arrow or enter or backspace)
                                get input(can accept letters OR left and right arrows to move cursor)
                                switch (input) {
                                    case letter:
                                        display it
                                    case left or right arrows:
                                        move cursor
                                    case enter:
                                        if too short: warning
                                        else break out of the loop
                                    case backspace:
                                        delete letter at cursor
                                    
                                }
                                process it (ignore invalid characters, reject enter if too short)
                                apply it if valid (move cursor or print letter)
                            } // loops while the characteer is invalid
                            word[5] is now filled up
                            verify if the word is valid
                                if valid break out of the loop
                                else loop again
                        } // loops while the word is invalid 
                        move cursor[ROW] down
                    }
                case 'Continue': (for later)
                    load last state (matrix, cursor, ...)
                case 'Settings': (for later)
                    display settings menu
                case 'Quit':
                    reset the terminal back from the ncurses changes
                    quit
            }
        }
    }